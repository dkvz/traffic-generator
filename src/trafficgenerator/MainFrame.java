

package trafficgenerator;

import java.net.*;
import java.text.DateFormat;
import java.util.*;

/**
 *
 * @author Alain
 */
public class MainFrame extends javax.swing.JFrame {

    private SenderThread [] clientThreads = null;
    private ServerThread [] serverThreads = null;
    private boolean clientStarted = false;
    private boolean serverStarted = false;

    public MainFrame() {
        initComponents();
    }

    public void appendError(boolean client, String error) {
        this.append("ERROR", client, error);
    }

    public void append(String type, boolean client, String info) {
        String add;
        if (client) {
            add = "CLIENT";
        } else {
            add = "SERVER";
        }
        Date date = new Date();
        String theDate = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM).format(date);
        this.jTextAreaLog.append(theDate + " - " + type + " - " + add + " - " + info + "\n");
        this.jTextAreaLog.setCaretPosition(this.jTextAreaLog.getText().length());
    }

    public synchronized void notifyServerThreadEnd() {
        if (this.serverThreads != null) {
            int count = 0;
            for (int x = 0; x < this.serverThreads.length; x++) {
                if (serverThreads[x].isTerminate()) {
                    count ++;
                }
            }
            if (count == serverThreads.length) {
                // Server operations done.
                this.serverStarted = false;
                for (int x = 0; x < this.serverThreads.length; x++) {
                    // Time difference in milisecs.
                    long span = this.serverThreads[x].getEnded().getTime() - this.serverThreads[x].getStarted().getTime();
//                    // Calculate packets by secs :
//                    long packBySec = this.clientThreads[x].getTotalPackets() / (span / 1000);
                    // Calculate bytes per secs :
                    double bytePerSec = this.serverThreads[x].getReceivedBytes() / (span / 1000.0);
                    bytePerSec = bytePerSec / (1024.0 * 1024.0);
                    this.append("INFO", false, this.serverThreads[x].getName() + " recieved " + this.serverThreads[x].getReceivedBytes() + " packet bytes.");
                    this.append("STATS", false, this.serverThreads[x].getName() + " recieved " + bytePerSec + " packet MB per second.");
                }
                this.jButtonStartServer.setText("Start server");
                this.append("INFO", false, "Server operations are over.");
            }
        }
    }

    public synchronized void notifyThreadEnd() {
        if (this.clientThreads != null) {
            int count = 0;
            for (int x = 0; x < this.clientThreads.length; x++) {
                if (clientThreads[x].isTerminate()) {
                    count ++;
                }
            }
            if (count == clientThreads.length) {
                // Client operations are done.
                this.clientStarted = false;
                for (int x = 0; x < this.clientThreads.length; x++) {
                    // Time difference in milisecs.
                    long span = this.clientThreads[x].getEnded().getTime() - this.clientThreads[x].getStarted().getTime();
                    // Calculate packets by secs :
                    double packBySec = this.clientThreads[x].getTotalPackets() / (span / 1000.0);
                    this.append("STATS", true, this.clientThreads[x].getName() + " sent " + packBySec + " packets per second.");
                }
                this.jButtonStartClient.setText("Start client");
                this.append("INFO", true, "Client operations are over.");
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelUnder = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaLog = new javax.swing.JTextArea();
        jPanelServer = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabelServerFrom = new javax.swing.JLabel();
        jLabelServerTo = new javax.swing.JLabel();
        jTextFieldServerFrom = new javax.swing.JTextField();
        jTextFieldServerTo = new javax.swing.JTextField();
        jTextFieldExpPackSize = new javax.swing.JTextField();
        jLabel1Stop = new javax.swing.JLabel();
        jTextFieldStopBytes = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jButtonStartServer = new javax.swing.JButton();
        jLabelStatusServer = new javax.swing.JLabel();
        jPanelClient = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButtonStartClient = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldTotSize = new javax.swing.JTextField();
        jPanelClientOptions = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldPacketSize = new javax.swing.JTextField();
        jTextFieldThreadCount = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldClientTo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldPacketCOunt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldClientFrom = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldLoopCount = new javax.swing.JTextField();
        jLabelStatus = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldSendTo = new javax.swing.JTextField();
        jLabel1DistantPort = new javax.swing.JLabel();
        jTextFieldDistantPort = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jTextFieldDistantPortTo = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemQuit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuItemClear = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Traffic Generator");

        jPanelUnder.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(18, 250));
        jScrollPane1.setViewportView(jTextAreaLog);

        jPanelUnder.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanelUnder, java.awt.BorderLayout.SOUTH);

        jPanelServer.setBorder(javax.swing.BorderFactory.createTitledBorder("Server"));
        jPanelServer.setPreferredSize(new java.awt.Dimension(420, 334));
        jPanelServer.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel10.setText("Expected packet size :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel2.add(jLabel10, gridBagConstraints);

        jLabel8.setText("Port range");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(13, 0, 6, 0);
        jPanel2.add(jLabel8, gridBagConstraints);

        jLabelServerFrom.setText("From :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        jPanel2.add(jLabelServerFrom, gridBagConstraints);

        jLabelServerTo.setText("To :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 0);
        jPanel2.add(jLabelServerTo, gridBagConstraints);

        jTextFieldServerFrom.setText("4000");
        jTextFieldServerFrom.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jTextFieldServerFrom, gridBagConstraints);

        jTextFieldServerTo.setText("4000");
        jTextFieldServerTo.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jTextFieldServerTo, gridBagConstraints);

        jTextFieldExpPackSize.setText("500 (sert Ã  rien)");
        jTextFieldExpPackSize.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jTextFieldExpPackSize, gridBagConstraints);

        jLabel1Stop.setText("Stop thread after :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 0);
        jPanel2.add(jLabel1Stop, gridBagConstraints);

        jTextFieldStopBytes.setText("0");
        jTextFieldStopBytes.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jTextFieldStopBytes, gridBagConstraints);

        jLabel12.setText("bytes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        jPanel2.add(jLabel12, gridBagConstraints);

        jPanelServer.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.GridLayout(2, 1));

        jButtonStartServer.setText("Start server");
        jButtonStartServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartServerActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonStartServer);

        jLabelStatusServer.setPreferredSize(new java.awt.Dimension(0, 30));
        jPanel4.add(jLabelStatusServer);

        jPanelServer.add(jPanel4, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanelServer, java.awt.BorderLayout.CENTER);

        jPanelClient.setBorder(javax.swing.BorderFactory.createTitledBorder("Client"));
        jPanelClient.setPreferredSize(new java.awt.Dimension(420, 500));
        jPanelClient.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(2, 1));

        jButtonStartClient.setText("Start client");
        jButtonStartClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartClientActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonStartClient);

        jPanel1.setPreferredSize(new java.awt.Dimension(358, 30));

        jLabel11.setText("Total size to send to distant port :");
        jPanel1.add(jLabel11);

        jTextFieldTotSize.setText("Click me !");
        jTextFieldTotSize.setPreferredSize(new java.awt.Dimension(180, 20));
        jTextFieldTotSize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldTotSizeMouseClicked(evt);
            }
        });
        jPanel1.add(jTextFieldTotSize);

        jPanel3.add(jPanel1);

        jPanelClient.add(jPanel3, java.awt.BorderLayout.SOUTH);

        jPanelClientOptions.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Client Port range");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 0);
        jPanelClientOptions.add(jLabel1, gridBagConstraints);

        jLabel2.setText("From :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 0);
        jPanelClientOptions.add(jLabel2, gridBagConstraints);

        jLabel3.setText("To :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 0);
        jPanelClientOptions.add(jLabel3, gridBagConstraints);

        jTextFieldPacketSize.setText("1024");
        jTextFieldPacketSize.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelClientOptions.add(jTextFieldPacketSize, gridBagConstraints);

        jTextFieldThreadCount.setText("1");
        jTextFieldThreadCount.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelClientOptions.add(jTextFieldThreadCount, gridBagConstraints);

        jLabel4.setText("Packet count :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 0);
        jPanelClientOptions.add(jLabel4, gridBagConstraints);

        jTextFieldClientTo.setText("11000");
        jTextFieldClientTo.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelClientOptions.add(jTextFieldClientTo, gridBagConstraints);

        jLabel5.setText("Packet size (bytes) :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 0);
        jPanelClientOptions.add(jLabel5, gridBagConstraints);

        jTextFieldPacketCOunt.setText("1000");
        jTextFieldPacketCOunt.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelClientOptions.add(jTextFieldPacketCOunt, gridBagConstraints);

        jLabel6.setText("Loop count :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 0);
        jPanelClientOptions.add(jLabel6, gridBagConstraints);

        jTextFieldClientFrom.setText("10000");
        jTextFieldClientFrom.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelClientOptions.add(jTextFieldClientFrom, gridBagConstraints);

        jLabel7.setText("Thread count :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 0);
        jPanelClientOptions.add(jLabel7, gridBagConstraints);

        jTextFieldLoopCount.setText("0");
        jTextFieldLoopCount.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelClientOptions.add(jTextFieldLoopCount, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1;
        jPanelClientOptions.add(jLabelStatus, gridBagConstraints);

        jLabel9.setText("Send to :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 0);
        jPanelClientOptions.add(jLabel9, gridBagConstraints);

        jTextFieldSendTo.setText("127.0.0.1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelClientOptions.add(jTextFieldSendTo, gridBagConstraints);

        jLabel1DistantPort.setText("Distant Port From :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 0);
        jPanelClientOptions.add(jLabel1DistantPort, gridBagConstraints);

        jTextFieldDistantPort.setText("4000");
        jTextFieldDistantPort.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        jPanelClientOptions.add(jTextFieldDistantPort, gridBagConstraints);

        jLabel13.setText("Distant Port to :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 0);
        jPanelClientOptions.add(jLabel13, gridBagConstraints);

        jTextFieldDistantPortTo.setText("4000");
        jTextFieldDistantPortTo.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        jPanelClientOptions.add(jTextFieldDistantPortTo, gridBagConstraints);

        jPanelClient.add(jPanelClientOptions, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanelClient, java.awt.BorderLayout.WEST);

        jMenuFile.setMnemonic('f');
        jMenuFile.setText("File");

        jMenuItemQuit.setMnemonic('q');
        jMenuItemQuit.setText("Quit");
        jMenuItemQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQuitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemQuit);

        jMenuBar1.add(jMenuFile);

        jMenuEdit.setMnemonic('e');
        jMenuEdit.setText("Edit");

        jMenuItemClear.setText("Clear notification zone");
        jMenuItemClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemClearActionPerformed(evt);
            }
        });
        jMenuEdit.add(jMenuItemClear);

        jMenuBar1.add(jMenuEdit);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemQuitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemQuitActionPerformed

    private void jButtonStartClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartClientActionPerformed
        if (!isClientStarted()) {
            try {
                // Start the clients.
                InetAddress address = InetAddress.getByName(this.jTextFieldSendTo.getText());
                int from = Integer.parseInt(this.jTextFieldClientFrom.getText());
                int to = Integer.parseInt(this.jTextFieldClientTo.getText());
                long packetCount = Long.parseLong(this.jTextFieldPacketCOunt.getText());
                int packetSize = Integer.parseInt(this.jTextFieldPacketSize.getText());
                int loopCount = Integer.parseInt(this.jTextFieldLoopCount.getText());
                int threadCount = Integer.parseInt(this.jTextFieldThreadCount.getText());
                int dstPort = Integer.parseInt(this.jTextFieldDistantPort.getText());
                this.setClientThreads(new SenderThread[threadCount]);
                int portCount = to - from;
                Random rand = new Random();
                int actDstPort = dstPort;
                int dstPortTo = Integer.parseInt(this.jTextFieldDistantPortTo.getText());
                for (int x = 0; x < threadCount; x++) {
                    int position = rand.nextInt(portCount + 1) + from;
                    this.getClientThreads()[x] = new SenderThread("CliThread" + x, this, address, packetSize, packetCount, from, to, position, actDstPort);
                    actDstPort++;
                    if (actDstPort > dstPortTo) {
                        actDstPort = dstPort;
                    }
                    this.getClientThreads()[x].setLoopCount(loopCount);
                }
                // Wait to initialize everything before starting the threads.
                for (int x = 0; x < threadCount; x++) {
                    this.getClientThreads()[x].start();
                }
                this.clientStarted = true;
                this.jButtonStartClient.setText("Stop client");
            } catch (UnknownHostException ex) {
                this.appendError(true, "Unknown host error - " + ex.toString());
            } catch (NumberFormatException ex) {
                this.appendError(true, "One of the fields is not formatted as it should : " + ex.getMessage());
            } catch (Exception ex) {
                this.appendError(true, "Unexpected error : " + ex.toString());
                ex.printStackTrace();
            }
        } else {
            // Stop the clients.
            if (this.getClientThreads() != null) {
                for (int x = 0; x < getClientThreads().length; x++) {
                    getClientThreads()[x].setTerminate(true);
                }
                //setClientThreads(null);
                this.clientStarted = false;
                this.jButtonStartClient.setText("Start client");
            }
        }
    }//GEN-LAST:event_jButtonStartClientActionPerformed

    private void jMenuItemClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemClearActionPerformed
        this.jTextAreaLog.setText("");
    }//GEN-LAST:event_jMenuItemClearActionPerformed

    private void jButtonStartServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartServerActionPerformed
        if (!this.serverStarted) {
            try {
                int fromPort = Integer.parseInt(this.jTextFieldServerFrom.getText());
                int toPort = Integer.parseInt(this.jTextFieldServerTo.getText());
                int maxBytes = Integer.parseInt(this.jTextFieldStopBytes.getText());
                this.serverThreads = new ServerThread[(toPort - fromPort) + 1];
                for (int x = fromPort; x <= toPort; x++) {
                    this.serverThreads[x - fromPort] = new ServerThread("ServThrPort" + x, this, x, maxBytes);
                }
                // Start them all in a different loop...
                for (int x = 0; x < this.serverThreads.length; x++) {
                    this.serverThreads[x].start();
                }
                this.serverStarted = true;
                this.jButtonStartServer.setText("Stop server");
            } catch (NumberFormatException ex) {
                this.appendError(false, "One of the fields is not formatted as it should : " + ex.getMessage());
            } catch (Exception ex) {
                 this.appendError(false, "Unexpected error : " + ex.toString());
                 ex.printStackTrace();
            }
        } else{
            // Stop the servers.
            if (this.serverThreads != null) {
                for (int x = 0; x < this.serverThreads.length; x++) {
                    this.serverThreads[x].setTerminate(true);
                }
                this.serverStarted = false;
                this.jButtonStartServer.setText("Start server");
            }
        }
    }//GEN-LAST:event_jButtonStartServerActionPerformed

    private void jTextFieldTotSizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldTotSizeMouseClicked
        try {
            long packetCount = Long.parseLong(this.jTextFieldPacketCOunt.getText());
            int packetSize = Integer.parseInt(this.jTextFieldPacketSize.getText());
            int loopCount = Integer.parseInt(this.jTextFieldLoopCount.getText());
            int threadCount = Integer.parseInt(this.jTextFieldThreadCount.getText());
            int from = Integer.parseInt(this.jTextFieldClientFrom.getText());
            int to = Integer.parseInt(this.jTextFieldClientTo.getText());
            long total = (to - from) * packetCount * (loopCount + 1) * threadCount * packetSize;
            this.jTextFieldTotSize.setText(Long.toString(total));
        } catch (NumberFormatException ex) {
            this.jTextFieldTotSize.setText("0");
        }
    }//GEN-LAST:event_jTextFieldTotSizeMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonStartClient;
    private javax.swing.JButton jButtonStartServer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel1DistantPort;
    private javax.swing.JLabel jLabel1Stop;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelServerFrom;
    private javax.swing.JLabel jLabelServerTo;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelStatusServer;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemClear;
    private javax.swing.JMenuItem jMenuItemQuit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelClient;
    private javax.swing.JPanel jPanelClientOptions;
    private javax.swing.JPanel jPanelServer;
    private javax.swing.JPanel jPanelUnder;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaLog;
    private javax.swing.JTextField jTextFieldClientFrom;
    private javax.swing.JTextField jTextFieldClientTo;
    private javax.swing.JTextField jTextFieldDistantPort;
    private javax.swing.JTextField jTextFieldDistantPortTo;
    private javax.swing.JTextField jTextFieldExpPackSize;
    private javax.swing.JTextField jTextFieldLoopCount;
    private javax.swing.JTextField jTextFieldPacketCOunt;
    private javax.swing.JTextField jTextFieldPacketSize;
    private javax.swing.JTextField jTextFieldSendTo;
    private javax.swing.JTextField jTextFieldServerFrom;
    private javax.swing.JTextField jTextFieldServerTo;
    private javax.swing.JTextField jTextFieldStopBytes;
    private javax.swing.JTextField jTextFieldThreadCount;
    private javax.swing.JTextField jTextFieldTotSize;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the clientThreads
     */
    public SenderThread[] getClientThreads() {
        return clientThreads;
    }

    /**
     * @param clientThreads the clientThreads to set
     */
    public void setClientThreads(SenderThread[] clientThreads) {
        this.clientThreads = clientThreads;
    }

    /**
     * @return the clientStarted
     */
    public boolean isClientStarted() {
        return clientStarted;
    }

    /**
     * @return the serverStarted
     */
    public boolean isServerStarted() {
        return serverStarted;
    }

}
